---
// src/pages/landing/[product].astro
import { getCollection } from 'astro:content';
import LandingLayout from '../../layouts/LandingLayout.astro';
import HeroProduct from '../../components/ui/HeroProduct.astro';
import Features from '../../components/pages/landing/Features.astro';
import Benefits from '../../components/pages/landing/Benefits.astro';
import Pricing from '../../components/pages/landing/Pricing.astro';
import PricingPlans from '../../components/pages/landing/PricingPlans.astro';
import Demo from '../../components/pages/landing/Demo.astro';
import FAQ from '../../components/ui/FAQ.astro';
import CTA from '../../components/ui/CTA.astro';

// Genera rutas para cada producto
export async function getStaticPaths() {
  const products = await getCollection('products');

  return products.map(product => ({
    params: { product: product.slug },
    props: { product },
  }));
}

const { product } = Astro.props;
const {
  title,
  description,
  price,
  pricePeriod,
  badge,
  heroImage,
  buyUrl,
  features,
  benefits,
  pricing,
  faqs,
  formId,
  plans,
} = product.data;

// Renderizar el contenido Markdown si existe
const { Content } = await product.render();
const hasContent = product.body && product.body.trim().length > 0;

// Calculate price display
let priceDisplay = undefined;
if (price && pricePeriod) {
  // Single fixed price
  priceDisplay = `$${price.toLocaleString()}/${pricePeriod}`;
} else if (plans && plans.length > 0) {
  // Price range from plans
  const prices = plans.map(plan => plan.price);
  const minPrice = Math.min(...prices);
  const maxPrice = Math.max(...prices);
  const period = plans[0].pricePeriod || 'mes'; // Use first plan's period as default
  priceDisplay = {
    min: `$${minPrice.toLocaleString()}`,
    max: `$${maxPrice.toLocaleString()}/${period}`
  };
}

// Prepara los datos para los componentes
const heroProps = {
  title,
  description,
  primaryCta: {
    text: 'Comprar Ahora',
    url: '#pricing',
  },
  ...(badge && { badge }),
  ...(priceDisplay && { price: priceDisplay }),
  ...(formId && {
    secondaryCta: {
      text: 'Descargar Demo',
      url: '#demo',
    },
  }),
  ...(heroImage && { image: heroImage }),
};

const featuresProps = {
  title: 'Funciones Principales',
  subtitle: `${title} ofrece potentes herramientas para optimizar tu trabajo.`,
  features,
};

const benefitsProps = {
  title: 'Beneficios para tu Negocio',
  subtitle: `${title} está diseñado para optimizar tus procesos.`,
  benefits,
};

// Props para pricing individual o múltiples planes
const pricingProps = price
  ? {
      price,
      features: pricing.features,
      ctaUrl: buyUrl || '#',
      highlighted: true,
      ...(pricePeriod ? { pricePeriod } : {}),
    }
  : undefined;

const pricingPlansProps = plans
  ? {
      title: 'Elige tu Licencia',
      subtitle: `Selecciona el número de licencias de ${title} que mejor se adapte a tu negocio.`,
      plans,
    }
  : null;

const demoProps = formId
  ? {
      formId,
    }
  : null;

const ctaProps = {
  title: `¿Listo para optimizar tu trabajo con ${title}?`,
  description:
    'Únete a miles de profesionales que confían en nuestras soluciones para gestionar sus procesos de manera eficiente.',
  primaryCta: {
    text: 'Comprar Ahora',
    url: buyUrl || '#pricing',
  },
  ...(formId && {
    secondaryCta: {
      text: 'Probar Demo Gratis',
      url: '#demo',
    },
  }),
  // Add payment button props for dynamic links
  productId: product.slug,
  planId: 'single', // Default to single plan, can be enhanced for multiple plans
  isPaymentButton: !buyUrl || buyUrl === '#pricing', // Use dynamic payment if no static URL
};

// Keywords para SEO
const keywords = [
  title.split(' ').join(', '),
  ...features.map(f => f.title),
  ...benefits.map(b => b.title),
  'Todoconta',
  'software contable',
  'herramientas fiscales',
];

// Verificar que todas las propiedades necesarias estén disponibles
const hasValidFeatures =
  features && Array.isArray(features) && features.length > 0;
const hasValidBenefits =
  benefits && Array.isArray(benefits) && benefits.length > 0;
const hasValidPricing =
  pricing && pricing.features && Array.isArray(pricing.features) && price;
const hasValidPlans = plans && Array.isArray(plans) && plans.length > 0;
const hasValidFaqs = faqs && Array.isArray(faqs) && faqs.length > 0;
---

<LandingLayout
  title={title}
  description={description}
  keywords={keywords}
  {...heroImage && { ogImage: heroImage }}
>
  <!-- Hero Section -->
  <HeroProduct {...heroProps} />

  <!-- Content Section (if available) -->
  {
    hasContent && (
      <section class="py-24">
        <div class="container mx-auto px-6">
          <div class="prose prose-lg max-w-4xl mx-auto">
            <Content />
          </div>
        </div>
      </section>
    )
  }

  <!-- Features Section -->
  {hasValidFeatures && <Features {...featuresProps} />}

  <!-- Benefits Section -->
  {hasValidBenefits && <Benefits {...benefitsProps} />}

  <!-- Pricing Section -->
  {hasValidPricing && <Pricing {...pricingProps} />}

  <!-- Pricing Plans Section (for products with multiple plans) -->
  {hasValidPlans && <PricingPlans {...pricingPlansProps} />}

  <!-- Demo Section (if available) -->
  {demoProps && <Demo {...demoProps} />}

  <!-- FAQ Section (if available) -->
  {hasValidFaqs && <FAQ faqs={faqs} />}

  <!-- Call to Action -->
  <CTA {...ctaProps} variant="simple" />
</LandingLayout>
