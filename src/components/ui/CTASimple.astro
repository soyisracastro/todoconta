---
import Button from './Button.astro';

export interface Props {
  title: string;
  description: string;
  primaryCta: {
    text: string;
    url: string;
  };
  secondaryCta?: {
    text: string;
    url: string;
  } | null;
  // New props for dynamic payment links
  productId?: string;
  planId?: string;
  isPaymentButton?: boolean;
}

const {
  title,
  description,
  primaryCta,
  secondaryCta,
  productId,
  planId,
  isPaymentButton = false,
} = Astro.props;
---

<section class="cta-simple">
  <div class="container">
    <div class="cta-content animate-fade-in-up">
      <h2 class="cta-title">{title}</h2>
      <p class="cta-description">{description}</p>

      <div class="cta-buttons">
        <Button
          href={primaryCta.url}
          variant="primary"
          data-product-id={productId}
          data-plan-id={planId}
          data-payment-button={isPaymentButton}
          id="primary-cta-button"
        >
          {primaryCta.text}
        </Button>

        {secondaryCta && (
          <Button href={secondaryCta.url} variant="outline">
            {secondaryCta.text}
          </Button>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const primaryButton = document.getElementById('primary-cta-button') as HTMLAnchorElement;

    if (primaryButton && primaryButton.dataset.paymentButton === 'true') {
      primaryButton.addEventListener('click', async (e) => {
        e.preventDefault();

        const productId = primaryButton.dataset.productId;
        const planId = primaryButton.dataset.planId;

        if (!productId || !planId) {
          console.error('Missing productId or planId for payment button');
          return;
        }

        // Show loading state
        const originalText = primaryButton.textContent;
        primaryButton.textContent = 'Generando enlace...';
        primaryButton.style.pointerEvents = 'none';

        try {
          // Get customer email (you might want to show a modal or form for this)
          const customerEmail = prompt('Por favor ingresa tu correo electr√≥nico:');

          if (!customerEmail) {
            primaryButton.textContent = originalText;
            primaryButton.style.pointerEvents = 'auto';
            return;
          }

          // Call the API to create payment link
          const response = await fetch('/api/stripe/create-payment-link', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              productId,
              planId,
              customerEmail,
            }),
          });

          if (!response.ok) {
            throw new Error('Failed to create payment link');
          }

          const data = await response.json();

          // Redirect to Stripe payment link
          window.location.href = data.url;

        } catch (error) {
          console.error('Error creating payment link:', error);
          alert('Error al generar el enlace de pago. Por favor intenta de nuevo.');
          primaryButton.textContent = originalText;
          primaryButton.style.pointerEvents = 'auto';
        }
      });
    }
  });
</script>

<style>
  .cta-simple {
    padding: var(--space-16) 0;
    background: var(--color-background);
    color: var(--color-text-primary);
    border-radius: var(--border-radius-xl) var(--border-radius-xl) 0 0;
    position: relative;
    overflow: hidden;
    margin-top: var(--space-16);
    border-top: 3px solid var(--color-primary);
  }

  .cta-simple::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100' fill='none'%3E%3Ccircle cx='25' cy='25' r='4' fill='rgba(20, 184, 166, 0.05)'/%3E%3Ccircle cx='75' cy='75' r='4' fill='rgba(20, 184, 166, 0.05)'/%3E%3Ccircle cx='75' cy='25' r='4' fill='rgba(20, 184, 166, 0.05)'/%3E%3Ccircle cx='25' cy='75' r='4' fill='rgba(20, 184, 166, 0.05)'/%3E%3C/svg%3E");
    opacity: 0.3;
    z-index: 1;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-6);
    position: relative;
    z-index: 1;
  }

  .cta-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
  }

  .cta-title {
    font-family: var(--font-secondary);
    font-size: var(--font-size-3xl);
    font-weight: 700;
    margin-bottom: var(--space-4);
    color: var(--color-text-primary);
  }

  .cta-description {
    margin-bottom: var(--space-8);
    font-size: var(--font-size-lg);
    line-height: 1.6;
    color: var(--color-text-secondary);
    opacity: 0.9;
  }

  .cta-buttons {
    display: flex;
    gap: var(--space-4);
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: var(--space-8);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .cta-title {
      font-size: var(--font-size-2xl);
    }

    .cta-description {
      font-size: var(--font-size-base);
    }

    .cta-buttons {
      flex-direction: column;
      width: 100%;
      align-items: center;
    }

    .cta-simple {
      border-radius: var(--border-radius-2xl) var(--border-radius-2xl) 0 0;
      margin-top: var(--space-10);
      padding: var(--space-10) 0;
    }
  }
</style>